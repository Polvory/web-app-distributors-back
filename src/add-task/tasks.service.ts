import { Injectable, HttpException, HttpStatus, Logger } from '@nestjs/common';
import { InjectModel } from '@nestjs/sequelize';
import { Task, TaskResult, TaskStatus } from './tasks.model';
import { CreateTaskDto } from './dto/create-task.dto';
import { AssignTaskDto } from './dto/assign-task.dto';
import { UsersService } from '../users/users.service';
import { NotificationService } from '../notification/notification.service'
import { TypeAdd } from '../type-add/type-add.model';
import { TypeAddTasks } from './type-add-tasks.model';
import { addImgesToTask } from '../images/images.interface';
import { Users } from 'src/users/users.model';
import { CompleteTaskDto } from './dto/complete-task.dto';
import { ToggleTaskResultDto } from './dto/toggle-task-result.dto';


@Injectable()
export class TasksService {
  private readonly logger = new Logger(TasksService.name);

  constructor(
    @InjectModel(Task) private readonly taskModel: typeof Task,
    @InjectModel(TypeAddTasks) private readonly TypeAddTasksModel: typeof TypeAddTasks,


    private readonly usersService: UsersService,
    private readonly NotificationService: NotificationService
  ) { }


  // async getTasksByExecutor(tg_user_id: string, completed: boolean) {

  //   const user: Users | false = await this.usersService.validateUser(tg_user_id)
  //   if (user) {
  //     const tasks = await this.taskModel.findAll({
  //       where: { executorId: user.id, completed: completed }, // —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–ª—é completed –≤ taskModel
  //       include: { all: true },
  //       order: [['createdAt', 'DESC']],
  //     })
  //     return tasks
  //   }

  // }

  async getTasksByExecutor(tg_user_id: string, completed?: boolean, status?: TaskStatus) {
    const user: Users | false = await this.usersService.validateUser(tg_user_id);

    // if (!user) {
    //   throw new HttpException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', HttpStatus.NOT_FOUND);
    // }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const whereCondition: any = {};

    // –£—á–∏—Ç—ã–≤–∞–µ–º completed, –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä —É–∫–∞–∑–∞–Ω
    if (completed !== undefined) {
      whereCondition.completed = completed;

    }
    if (user !== false) {
      whereCondition.executorId = user.id;
    }
    // –£—á–∏—Ç—ã–≤–∞–µ–º status, –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä —É–∫–∞–∑–∞–Ω
    if (status !== undefined) {
      whereCondition.status = status;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ whereCondition
    const tasks = await this.taskModel.findAll({
      where: whereCondition,
      include: { all: true },
      order: [['createdAt', 'DESC']],
    });

    return tasks;
  }


  async createTask(dto: CreateTaskDto)
  // : Promise<Task> 
  {
    try {
      const user = await this.usersService.validateUser(dto.tg_user_id);
      if (!user) {
        this.logger.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å tg_user_id ${dto.tg_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        throw new HttpException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', HttpStatus.NOT_FOUND);
      }
      const newTask = await this.taskModel.create(dto);

      this.logger.log(`–ù–∞–∑–Ω–∞—á–∞–µ–º –∞–≤—Ç–æ—Ä: ${user.tg_user_id}`);
      newTask.creator_user_name = user.tg_user_name;

      this.logger.log(`–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: ${newTask.id}`);
      return await newTask.save();
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: ${error.message}`);
      throw new HttpException('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏', HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }

  async addTypeAddToTask(taskId: string, typeAddId: string) {
    try {

      const task = await this.taskModel.findByPk(taskId)
      this.logger.log(`–¢–∞—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞`, JSON.stringify(task))
      if (task && typeAddId) {
        await task.$add('typeAdds', typeAddId);
        return await this.taskModel.findOne({ where: { id: task.id } })
      }
      return false;
    } catch (error) {
      this.logger.error(error)
    }

  }

  async validate(id: string) {
    this.logger.log(`–ò—â–µ–º —Ç–∞—Å–∫—É : ${id}`)
    return await this.taskModel.findOne({ where: { id: id }, include: { all: true } })
  }


  async findTasksByTypeAddId(typeAddId: string, taskId: string) {
    try {
      const tasks = await this.TypeAddTasksModel.findOne({ where: { taskId: taskId, typeAddId: typeAddId } });
      return tasks;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–¥–∞—á –ø–æ typeAddId:', error);
      throw error;
    }
  }

  async editTask(id: string, dto: CreateTaskDto): Promise<Task> {
    try {
      const task = await this.taskModel.findByPk(id);
      if (!task) {
        this.logger.error(`–ó–∞–¥–∞—á–∞ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        throw new HttpException('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', HttpStatus.NOT_FOUND);
      }
      await task.update(dto);
      this.logger.log(`–ó–∞–¥–∞—á–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞: ${task.id}`);
      return task;
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: ${error.message}`);
      throw new HttpException('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏', HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }


  getDate(date: string) {
    const newdate = new Date(date);
    const formattedDate = newdate.toISOString().split('T')[0];
    return formattedDate
  }

  async assignTaskToUser(dto: AssignTaskDto)
  // : Promise<Task> 
  {
    try {
      const task: any = await this.taskModel.findByPk(dto.taskId);
      if (!task) {
        this.logger.error(`–ó–∞–¥–∞—á–∞ —Å ID ${dto.taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        throw new HttpException('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', HttpStatus.NOT_FOUND);
      }

      const user = await this.usersService.validateUser(dto.tg_user_id);
      if (!user) {
        this.logger.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å tg_user_id ${dto.tg_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        throw new HttpException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', HttpStatus.NOT_FOUND);
      }

      const creatorNickname: any = await this.usersService.validateUser(task.creatorId);


      if (task.executorId != user.id) {
        this.logger.log(`–ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∑–∞–¥–∞—á—É c ${task.executorId} –Ω–∞ ${user.id}`)
        const userOld: any = await this.usersService.validateUser(task.executorId);
        this.logger.log(userOld)
        task.executorId = user.id;
        const newDataTask = await task.save();
        const messageToNew = `üíö\n–ü—Ä–∏–≤–µ—Ç! –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞\n–î–∞—Ç–∞: ${this.getDate(task.date)}\n–ê–¥—Ä–µ—Å: ${task.address} \n–ê–≤—Ç–æ—Ä: @${creatorNickname.tg_user_name}`
        const messageToOld = `‚ùå‚ùå‚ùå\n–ü—Ä–∏–≤–µ—Ç! –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ \n–î–∞—Ç–∞: ${this.getDate(task.date)}\n–ê–¥—Ä–µ—Å: ${task.address} \n–ê–≤—Ç–æ—Ä: @${creatorNickname.tg_user_name}`
        this.NotificationService.sendTaskAddNotification(String(user.tg_user_id), messageToNew)
        this.NotificationService.sendTaskAddNotification(String(userOld.tg_user_id), messageToOld)
        return newDataTask

      } else {
        this.logger.log(`–ó–∞–¥–∞—á–∞ ${task.id} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${dto.tg_user_id}`);
        task.executorId = user.id;
        const newDataTask = await task.save();
        const message = `üíö\ –ü—Ä–∏–≤–µ—Ç! –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞\n–î–∞—Ç–∞: ${this.getDate(task.date)}\n–ê–¥—Ä–µ—Å: ${task.address}\n–ê–≤—Ç–æ—Ä: @${creatorNickname.tg_user_name}`
        this.logger.log(message)
        this.NotificationService.sendTaskAddNotification(String(user.tg_user_id), message)
        return newDataTask
      }
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ${error.message}`);
      throw new HttpException('–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏', HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }


  async getTasks(creatorId?: string) {
    const whereCondition = creatorId ? { creatorId } : {};
    return await this.taskModel.findAll({
      where: whereCondition,
      include: { all: true },
      order: [['createdAt', 'DESC']],
    });
  }

  async addImages(data: addImgesToTask) {
    const task: Task = await this.validate(data.task_id)
    if (!task) {
      throw new Error(`–ó–∞–¥–∞—á–∞ —Å ID ${data.task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }
    const taskResult: TaskResult[] = task.task_result || [];
    const existingResult = taskResult.find((result) => result.typeAddId === data.type_add_id);

    if (existingResult) {
      // –ï—Å–ª–∏ —Ç–∞–∫–æ–π typeAddId —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–∞—Å—Å–∏–≤
      existingResult.images = [...new Set([...existingResult.images, ...data.files])]; // –ò—Å–ø–æ–ª—å–∑—É–µ–º Set –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    } else {
      // –ï—Å–ª–∏ typeAddId –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç TaskResult
      const newTaskResult: TaskResult = {
        typeAddId: data.type_add_id,
        passed: true,
        images: data.files,
      };
      taskResult.push(newTaskResult);

    }
    await this.taskModel.update(
      { task_result: taskResult },
      { where: { id: data.task_id } }
    );
    // const updatedTask = await this.taskModel.findByPk(data.task_id);
    return taskResult;
  }



  async removeImage(task_id: string, type_add_id: string, imageName: string) {
    const task: Task = await this.validate(task_id);

    if (!task) {
      throw new Error(`–ó–∞–¥–∞—á–∞ —Å ID ${task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }

    const taskResult: TaskResult[] = task.task_result || [];
    const existingResult = taskResult.find((result) => result.typeAddId === type_add_id);

    if (existingResult) {
      // –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞ images
      const updatedImages = existingResult.images.filter((image) => image !== imageName);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤–µ—Å—å –æ–±—ä–µ–∫—Ç
      if (updatedImages.length > 0) {
        existingResult.images = updatedImages;
      } else {
        // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç, —É–¥–∞–ª—è–µ–º –≤–µ—Å—å TaskResult –∏–∑ –º–∞—Å—Å–∏–≤–∞
        task.task_result = taskResult.filter((result) => result.typeAddId !== type_add_id);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
      await task.save();

      this.logger.log('–£–¥–∞–ª–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞', imageName);
    } else {
      this.logger.warn(`TypeAdd —Å ID ${type_add_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–¥–∞—á–∏`);
    }

    return task;
  }



  async completeTask(taskId: string): Promise<Task> {
    const task: any = await this.taskModel.findByPk(taskId, { include: { all: true } });

    if (!task) {
      this.logger.error(`–ó–∞–¥–∞—á–∞ —Å ID ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      throw new HttpException('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', HttpStatus.NOT_FOUND);
    }



    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –†–ê–°–°–ú–û–¢–†–ï–ù–ò–ï
    task.status = TaskStatus.COMPLETED;
    task.completed = true

    await task.save();

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ
    const creatorNickname: any = await this.usersService.validateUser(task.tg_user_id);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if (task.creatorId) {
      const creator = await this.usersService.validateUser(task.creatorId);
      if (creator) {
        const message = `\n–ó–∞–¥–∞—á–∞ ${taskId} \n–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${creatorNickname.tg_user_name}.\n–î–∞—Ç–∞: ${this.getDate(task.date)}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.`;

        await this.NotificationService.sendTaskAddNotification(String(creator.tg_user_id), message);
      }
    }

    this.logger.log(`–ó–∞–¥–∞—á–∞ —Å ID ${taskId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.`);
    return task;
  }

  async toggleTaskResult(taskId: string, dto: ToggleTaskResultDto): Promise<Task> {
    const task = await this.taskModel.findByPk(taskId);
    this.logger.log(task.id)
    if (!task) {
      throw new HttpException('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', HttpStatus.NOT_FOUND);
    }

    this.logger.debug(JSON.stringify(task))

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è `task_result` –∫–∞–∫ –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    let taskResult: TaskResult[] = task.task_result = task.task_result || [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º `typeAddId`
    const existingResultIndex = task.task_result.findIndex(
      (result) => result.typeAddId === dto.typeAddId,
    );
    this.logger.debug(`–ò—â–µ–º —Ç–∞—Å–∫—É –ø–æ id: ${JSON.stringify(existingResultIndex)}`)

    if (existingResultIndex != -1) {
      this.logger.warn(`–¢–∞—Å–∫–∞ –µ—Å—Ç—å`)
      taskResult[existingResultIndex].passed = dto.passed

    } else {
      const payloud = {
        typeAddId: dto.typeAddId,
        passed: dto.passed,
        images: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      }
      this.logger.warn(`–¢–∞—Å–∫–∏ –Ω–µ—Ç`)
      this.logger.warn(JSON.stringify(payloud))
      taskResult.push(payloud)
    }

    // task.task_result[existingResultIndex].passed = dto.passed
    // taskResult = task.task_result

    this.logger.debug(JSON.stringify(taskResult))

    // if (dto.passed) {
    //   // –ï—Å–ª–∏ —á–µ–∫–±–æ–∫—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç
    //   if (existingResultIndex !== -1) {
    //     task.task_result[existingResultIndex].passed = dto.passed;
    //   } else {
    //     task.task_result.push({
    //       typeAddId: dto.typeAddId,
    //       passed: dto.passed,
    //       images: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    //     });
    // }

    //   // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ IN_PROGRESS
    //   task.status = TaskStatus.IN_PROGRESS;
    // } else {
    //   // –ï—Å–ª–∏ —á–µ–∫–±–æ–∫—Å —Å–Ω—è—Ç –∏ `images` –ø—É—Å—Ç–æ–π, —É–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç
    //   if (
    //     existingResultIndex !== -1 &&
    //     task.task_result[existingResultIndex].images.length === 0
    //   ) {
    //     task.task_result.splice(existingResultIndex, 1);
    //   }
    // }
    this.logger.debug(JSON.stringify(taskResult))
    await this.taskModel.update(
      { task_result: taskResult, status: task.status },
      { where: { id: taskId } }
    );

    const newTask = await this.taskModel.findOne({ where: { id: taskId }, include: { all: true } });
    // this.logger.warn(JSON.stringify(await newTask))
    return newTask
  }

  async editStatus(task: Task, status: TaskStatus) {
    try {
      task.status = status
      return await task.save()
    } catch (error) {
      throw new HttpException('–ù–µ —É–¥–∞–ª—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å!', HttpStatus.NOT_FOUND);
    }


  }

}
