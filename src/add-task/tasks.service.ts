import { Injectable, HttpException, HttpStatus, Logger } from '@nestjs/common';
import { InjectModel } from '@nestjs/sequelize';
import { Task, TaskResult } from './tasks.model';
import { CreateTaskDto } from './dto/create-task.dto';
import { AssignTaskDto } from './dto/assign-task.dto';
import { UsersService } from '../users/users.service';
import { NotificationService } from '../notification/notification.service'
import { TypeAdd } from '../type-add/type-add.model';
import { TypeAddTasks } from './type-add-tasks.model';
import { addImgesToTask } from '../images/images.interface';
import { CompleteTaskDto } from './dto/complete-task.dto';

@Injectable()
export class TasksService {
  private readonly logger = new Logger(TasksService.name);

  constructor(
    @InjectModel(Task) private readonly taskModel: typeof Task,
    @InjectModel(TypeAddTasks) private readonly TypeAddTasksModel: typeof TypeAddTasks,


    private readonly usersService: UsersService,
    private readonly NotificationService: NotificationService
  ) { }

  async createTask(dto: CreateTaskDto): Promise<Task> {
    try {
      const user = await this.usersService.validateUser(dto.tg_user_id);
      if (!user) {
        this.logger.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å tg_user_id ${dto.tg_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        throw new HttpException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', HttpStatus.NOT_FOUND);
      }

      // dto.creatorId = user.id
      this.logger.log(`–î–æ–±–∞–≤–ª–µ–Ω –∞–≤—Ç–æ—Ä: ${user.tg_user_id}`);
      const newTask = await this.taskModel.create(dto);
      newTask.creatorId = user.id

      this.logger.log(`–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: ${newTask.id}`);
      return await newTask.save();
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: ${error.message}`);
      throw new HttpException('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏', HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }

  async addTypeAddToTask(taskId: string, typeAddId: string) {
    try {

      const task = await this.taskModel.findByPk(taskId)
      this.logger.log(`–¢–∞—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞`, JSON.stringify(task))
      if (task && typeAddId) {
        await task.$add('typeAdds', typeAddId);
        return true
      }
      return false;
    } catch (error) {
      this.logger.error(error)
    }

  }

  async validate(id: string) {
    this.logger.log(`–ò—â–µ–º —Ç–∞—Å–∫—É : ${id}`)
    return await this.taskModel.findOne({ where: { id: id }, include: { all: true } })
  }


  async findTasksByTypeAddId(typeAddId: string, taskId: string) {
    try {
      const tasks = await this.TypeAddTasksModel.findOne({ where: { taskId: taskId, typeAddId: typeAddId } });
      return tasks;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–¥–∞—á –ø–æ typeAddId:', error);
      throw error;
    }
  }

  async editTask(id: string, dto: CreateTaskDto): Promise<Task> {
    try {
      const task = await this.taskModel.findByPk(id);
      if (!task) {
        this.logger.error(`–ó–∞–¥–∞—á–∞ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        throw new HttpException('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', HttpStatus.NOT_FOUND);
      }
      await task.update(dto);
      this.logger.log(`–ó–∞–¥–∞—á–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞: ${task.id}`);
      return task;
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: ${error.message}`);
      throw new HttpException('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏', HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }


  getDate(date: string) {
    const newdate = new Date(date);
    const formattedDate = newdate.toISOString().split('T')[0];
    return formattedDate
  }

  async assignTaskToUser(dto: AssignTaskDto)
  // : Promise<Task> 
  {
    try {
      const task: any = await this.taskModel.findByPk(dto.taskId);
      if (!task) {
        this.logger.error(`–ó–∞–¥–∞—á–∞ —Å ID ${dto.taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        throw new HttpException('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', HttpStatus.NOT_FOUND);
      }

      const user = await this.usersService.validateUser(dto.tg_user_id);
      if (!user) {
        this.logger.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å tg_user_id ${dto.tg_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        throw new HttpException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', HttpStatus.NOT_FOUND);
      }

      const creatorNickname: any = await this.usersService.validateUser(task.creatorId);


      if (task.executorId != user.id) {
        this.logger.log(`–ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∑–∞–¥–∞—á—É c ${task.executorId} –Ω–∞ ${user.id}`)
        const userOld: any = await this.usersService.validateUser(task.executorId);
        this.logger.log(userOld)
        task.executorId = user.id;
        const newDataTask = await task.save();
        const messageToNew = `üíö\n–ü—Ä–∏–≤–µ—Ç! –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞\n–î–∞—Ç–∞: ${this.getDate(task.date)}\n–ê–¥—Ä–µ—Å: ${task.address} \n–ê–≤—Ç–æ—Ä: @${creatorNickname.tg_user_name}`
        const messageToOld = `‚ùå‚ùå‚ùå\n–ü—Ä–∏–≤–µ—Ç! –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ \n–î–∞—Ç–∞: ${this.getDate(task.date)}\n–ê–¥—Ä–µ—Å: ${task.address} \n–ê–≤—Ç–æ—Ä: @${creatorNickname.tg_user_name}`
        this.NotificationService.sendTaskAddNotification(String(user.tg_user_id), messageToNew)
        this.NotificationService.sendTaskAddNotification(String(userOld.tg_user_id), messageToOld)
        return newDataTask

      } else {
        this.logger.log(`–ó–∞–¥–∞—á–∞ ${task.id} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${dto.tg_user_id}`);
        task.executorId = user.id;
        const newDataTask = await task.save();
        const message = `üíö\ –ü—Ä–∏–≤–µ—Ç! –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞\n–î–∞—Ç–∞: ${this.getDate(task.date)}\n–ê–¥—Ä–µ—Å: ${task.address}\n–ê–≤—Ç–æ—Ä: @${creatorNickname.tg_user_name}`
        this.logger.log(message)
        this.NotificationService.sendTaskAddNotification(String(user.tg_user_id), message)
        return newDataTask
      }
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ${error.message}`);
      throw new HttpException('–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏', HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }


  async getTasks() {
    return await this.taskModel.findAll({ include: { all: true } })
  }

  async addImages(data: addImgesToTask) {
    const task: Task = await this.validate(data.task_id)
    if (!task) {
      throw new Error(`–ó–∞–¥–∞—á–∞ —Å ID ${data.task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }
    const taskResult: TaskResult[] = task.task_result || [];
    const existingResult = taskResult.find((result) => result.typeAddId === data.type_add_id);

    if (existingResult) {
      // –ï—Å–ª–∏ —Ç–∞–∫–æ–π typeAddId —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–∞—Å—Å–∏–≤
      existingResult.images = [...new Set([...existingResult.images, ...data.files])]; // –ò—Å–ø–æ–ª—å–∑—É–µ–º Set –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    } else {
      // –ï—Å–ª–∏ typeAddId –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç TaskResult
      const newTaskResult: TaskResult = {
        typeAddId: data.type_add_id,
        passed: false,
        images: data.files,
      };
      taskResult.push(newTaskResult);
    }
    // –û–±–Ω–æ–≤–ª—è–µ–º task_result –≤ –∑–∞–¥–∞—á–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    // task.task_result = taskResult;
    // return await task.save();
        // –û–±–Ω–æ–≤–ª—è–µ–º task_result –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é
        await this.taskModel.update(
          { task_result: taskResult },
          { where: { id: data.task_id } }
        );
    
        return task; 
  }



  async removeImage(task_id: string, type_add_id: string, imageName: string) {
    const task: Task = await this.validate(task_id);

    if (!task) {
      throw new Error(`–ó–∞–¥–∞—á–∞ —Å ID ${task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }

    const taskResult: TaskResult[] = task.task_result || [];
    const existingResult = taskResult.find((result) => result.typeAddId === type_add_id);

    if (existingResult) {
      // –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞ images
      const updatedImages = existingResult.images.filter((image) => image !== imageName);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤–µ—Å—å –æ–±—ä–µ–∫—Ç
      if (updatedImages.length > 0) {
        existingResult.images = updatedImages;
      } else {
        // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç, —É–¥–∞–ª—è–µ–º –≤–µ—Å—å TaskResult –∏–∑ –º–∞—Å—Å–∏–≤–∞
        task.task_result = taskResult.filter((result) => result.typeAddId !== type_add_id);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
      await task.save();

      this.logger.log('–£–¥–∞–ª–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞', imageName);
    } else {
      this.logger.warn(`TypeAdd —Å ID ${type_add_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–¥–∞—á–∏`);
    }

    return task;
  }

  // async completeTask(taskId: string, dto: CompleteTaskDto): Promise<Task> {
  //   const task: any = await this.taskModel.findByPk(taskId, { include: { all: true } });
  //   if (!task) {
  //     this.logger.error(`–ó–∞–¥–∞—á–∞ —Å ID ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
  //     throw new HttpException('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', HttpStatus.NOT_FOUND);
  //   }

  //   // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–¥–∞—á–∏
  //   const taskResult = {
  //     typeAddId: dto.typeAddId,
  //     images: dto.images,
  //     passed: true,
  //   };
  //   task.task_result = [...(task.task_result || []), taskResult];
  //   task.completed = dto.completed;

  //   await task.save();
  //   const creatorNickname: any = await this.usersService.validateUser(task.tg_user_id);

  //   const message = `\n–ó–∞–¥–∞—á–∞ ${taskId} \n–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${creatorNickname.tg_user_name}.\n–î–∞—Ç–∞: ${this.getDate(task.date)}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.`

  //   // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
  //   if (task.creatorId) {
  //     const creator = await this.usersService.validateUser(task.creatorId);
  //     if (creator) {
  //       await this.NotificationService.sendTaskAddNotification(
  //         String(creator.tg_user_id), message
          
  //       );
  //     }
  //   }

  //   this.logger.log(`–ó–∞–¥–∞—á–∞ —Å ID ${taskId} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
  //   return task;
  // }

  async completeTask(taskId: string, dto: CompleteTaskDto): Promise<Task> {
    const task: any = await this.taskModel.findByPk(taskId, { include: { all: true } });
    if (!task) {
      this.logger.error(`–ó–∞–¥–∞—á–∞ —Å ID ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      throw new HttpException('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', HttpStatus.NOT_FOUND);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è task_result –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    task.task_result = task.task_result || [];

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö `typeAddId`
    const completedTypesMap = new Set(dto.completedTypes);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ task_result –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
    task.task_result = task.task_result.map(result => {
      if (completedTypesMap.has(result.typeAddId)) {
        return { ...result, passed: true };
      }
      return result;
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥—ã–π `typeAddId` –∏–∑ dto –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ task_result –∏ –∏–º–µ–µ—Ç `passed: true`
    const allTypesCompleted = dto.completedTypes.every(typeId =>
      task.task_result.some(result => result.typeAddId === typeId && result.passed === true)
    );

    task.completed = allTypesCompleted;
    await task.save();

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ
    const creatorNickname: any = await this.usersService.validateUser(task.tg_user_id);

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if (task.creatorId) {
      const creator = await this.usersService.validateUser(task.creatorId);
      if (creator) {
        const message = allTypesCompleted
          ? `\n–ó–∞–¥–∞—á–∞ ${taskId} \n–ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${creatorNickname.tg_user_name}.\n–î–∞—Ç–∞: ${this.getDate(task.date)}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.`
          : `\n–ó–∞–¥–∞—á–∞ ${taskId} \n–ß–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${creatorNickname.tg_user_name}.\n–î–∞—Ç–∞: ${this.getDate(task.date)}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å.`;

        await this.NotificationService.sendTaskAddNotification(String(creator.tg_user_id), message);
      }
    }

    this.logger.log(`–ó–∞–¥–∞—á–∞ —Å ID ${taskId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${allTypesCompleted ? '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞' : '—á–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'}`);
    return task;
}

}
